import cv2
import numpy as np
from picamera import PiCamera as camera
from picamera.array import PiRGBArray as Pi
import tflite_runtime.interpreter as tf
import RPi.GPIO as GPIO
import time

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BOARD)

interpreter_model = None
desired_position_x = 320
desired_position_y = 240

#Change these to fit our design
model_path = ''
servo_pin = 11
left_motor_pin = 12
right_motor_pin = 16

def load_model(model_path):
    interpreter_model = tf.Interpreter(model_path=model_path)
    interpreter_model.allocate_tensors()
    return interpreter_model

def preprocess_image(image):
    input_tensor = image.astype(np.float32)
    input_tensor = np.expand_dims(input_tensor, axis=0)
    return input_tensor

def run_inference(interpreter_model, image):
    input_data = preprocess_image(image)
    interpreter_model.set_tensor(interpreter_model.get_input_details()[0]['index'], input_data)
    interpreter_model.invoke()
    return interpreter_model.get_tensor(interpreter_model.get_output_details()[0]['index'])

def calculate_motor_output(error_x, error_y):
    speed = 1.0 

    left_motor_speed = speed
    right_motor_speed = speed

    return left_motor_speed, right_motor_speed

def move_servo(servo_pin, error_y):
    GPIO.setup(servo_pin, GPIO.OUT)  
    servo = GPIO.PWM(servo_pin, 50)  

    servo.start(0)

    duty_cycle = 7.5 + 0.05 * error_y
    servo.ChangeDutyCycle(duty_cycle)

    time.sleep(0.1)

    servo.stop()
    GPIO.cleanup()

def move_motor(left_motor_pin, right_motor_pin, left_motor_speed, right_motor_speed):
    GPIO.setup(left_motor_pin, GPIO.OUT)
    GPIO.setup(right_motor_pin, GPIO.OUT)

    left_pwm = GPIO.PWM(left_motor_pin, 100) 
    left_pwm.start(left_motor_speed * 100)  

    right_pwm = GPIO.PWM(right_motor_pin, 100)
    right_pwm.start(right_motor_speed * 100)

def operation_kill_undead(interpreter_model, servo_pin, left_motor_pin, right_motor_pin, desired_position_x, desired_position_y):
    camera_resolution = (640, 480)
    cam = camera(resolution=camera_resolution)
    cam.start_preview()

    raw_capture = Pi(cam)

    time.sleep(0.1)

    interpreter_model = load_model(model_path)

    highest_card_y = float('inf') 

    try:
        while True:
            image = raw_capture.array
            output_data = run_inference(interpreter_model, image)

            x, y, w, h = output_data[0]
            error_x = desired_position_x - (x + w // 2)
            error_y = desired_position_y - (y + h // 2)

            print("Error X: " + str(error_x) + ", Error Y: " + str(error_y))

            left_motor_speed, right_motor_speed = calculate_motor_output(error_x, error_y)

            if y < highest_card_y:
                highest_card_y = y
                desired_position_y = y

            move_motor(left_motor_pin, right_motor_pin, left_motor_speed, right_motor_speed)
            move_servo(servo_pin, error_y)

            raw_capture.truncate(0)
    finally:
        raw_capture.close()
        cam.stop_preview()

operation_kill_undead(interpreter_model, servo_pin, left_motor_pin, right_motor_pin, desired_position_x, desired_position_y)
